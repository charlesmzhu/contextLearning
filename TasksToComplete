Tasks to Complete

5/11/2015
- Thigns have become untenable at this point in terms of how words are served. A new implementation decision:

  1. Create word collection pages - that's the new home page - sets of words.
  2. You can also see all words on a page
  3. The only way you can persist your shuffled client array is with having a user property called 'currentSet' that contains an object containing both an currentId and an array pointing to every word id.


5/10/2015
- When you go to an individual card's url, it loses where you were in the collection. But there isn't much of a use case for actually going to the URL. It might be better to just do everything over Sessions. Actually counterpoint: having the URL allows for one to come back to where they were - for example, they might have 100 flashcards.
- TO implement this solution, we could
	1. Make another Collection that stores the current array.
	2. Use localStorage tokens.
- To-do (* indicate priority for tomorrow)
	1. Move arrows
	2. Add a word*: add, edit, delete words
	3. Delete a word

5/7/2015
- Made a just-barely working version of the app, but want to make it RESTful, i.e., the URL shows how you're getting there
- In Microscope, it's done like this =>

Router.route('/posts/:_id', { //:_id matches and passes to router's params array. Name and data are passed to client.
  name: 'postPage', //name = name of route AND template name. To change template (while keeping name, pass function () { this.render('postPage') }
  data: function () { return Posts.findOne( this.params._id ); }  //data = cursor passed to client.
});

-


Small database
- Store the entire document with all information in the parent document
- Store just an array of ids of the nested document in the parent document
- Store the id of the parent document on the child document
Big/complex database


Set up collections
- Avoid repetition with
	1. Words = new Mongo.Collection ( "words ");
		- Date created
		- Word id
		- Fragments are embedded because we will have to constantly draw the information
			-  
		- Journal id array
			- id1
			- id2
			- id3
			- id4
			- ...
		- User
			- Username
			- id 
	2. Journal = new Mongo.Collection ( "journal" )
		- Date created
		- Word id array:
			- id1
			- id2
			- id3
			- ...
		- User
			- Username
			- id


Set up templates with js files
	1. "concept": Word center
		- Display word
	2. "contextItem": Context1
	3. "contextItem": Context2
	4. "input" Text input
		- 
	5. Layout
		- JS file removes one

Set up routes
	1. 
		Route
	2. 

Remove autopublish, make secure, etc.


MVP iterations
1. One word
  - Click to display next wordd
  - Add word
2. Pre-set fragments
3. User input of fragments
4. Journal tabs and resizing
